name: Continuous Integration (CI) Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox

    - name: Cache tox environment
      uses: actions/cache@v4
      with:
        path: .tox
        key: 3.12-tox-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('tox.ini') }}

    - name: Cache pre-commit environment
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: 3.12-pre-commit-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Lint and format with tox
      run: tox -e lint

    - name: If linting passes, upload any formatting changes
      uses: EndBug/add-and-commit@v9
      with:
        message: "@auto Formatting"

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions

    - name: Cache tox environment
      uses: actions/cache@v4
      with:
        path: .tox
        key: ${{ matrix.python-version }}-tox-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('tox.ini') }}

    - name: Test with tox
      run: tox

  docs:
    if: github.event_name != 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    concurrency: ci-${{ github.ref }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: Cache tox environment
        uses: actions/cache@v4
        with:
          path: .tox
          key: 3.11-tox-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('tox.ini') }}

      - name: Build documentation with tox
        run: tox -e docs

      - name: Add the the latest docs back to the repo if they've been updated
        uses: EndBug/add-and-commit@v9
        with:
          pull: '--rebase --autostash'
          message: "@auto Update docs"

      - name: Deploy new docs if they've been updated
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: docs
          folder: docs/build/html

  release:
    runs-on: ubuntu-latest
    needs: 
      - test  # Ensure tests pass before releasing
      - docs  # Ensure docs are built before releasing to avoid unsynced docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
          python -m pip install poetry

      - name: Configure git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          echo "https://${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials

      - name: Determine version type from commit message
        id: get_version
        run: |
          echo "Commit message: ${{ github.event.head_commit.message }}"
          if [[ "${{ github.event.head_commit.message }}" == feat\!* ]]; then
            echo "::set-output name=version_type::major"
            echo "::set-output name=release_proceed::true"
          elif [[ "${{ github.event.head_commit.message }}" == feat:* ]]; then
            echo "::set-output name=version_type::minor"
            echo "::set-output name=release_proceed::true"
          elif [[ "${{ github.event.head_commit.message }}" == fix:* \
              || "${{ github.event.head_commit.message }}" == refactor:* ]]; then
            echo "::set-output name=version_type::patch"
            echo "::set-output name=release_proceed::true"
          else
            echo "::set-output name=release_proceed::false"  # No release needed
          fi

      - name: Run release with tox
        if: steps.get_version.outputs.release_proceed == 'true'
        run: |
          chmod +x scripts/release.sh
          max_attempts=3
          attempt=0
          until [ $attempt -ge $max_attempts ]
          do
            tox -e release -- ${{ steps.get_version.outputs.version_type }} \
              ${{ secrets.PYPI_TOKEN }} && break
            exit_code=$?

            if [ $exit_code -eq 0 ]; then
              break  # Success
            elif [ $exit_code -eq 1 ]; then
              echo "Tox failed with exit code 1 (attempt $attempt). Attempting to commit changes..."
              git add .
              git commit -m "chore: commit changes for release"
            else
              echo "Tox failed with exit code $exit_code (attempt $attempt). Not retrying."
              break
            fi

            attempt=$(( attempt + 1 ))
            echo "Retrying in 10 seconds..."
            sleep 10
          done
          if [ $attempt -ge $max_attempts ]; then
            echo "Tox failed after $attempt attempts. Exiting..."
            exit 1
          fi